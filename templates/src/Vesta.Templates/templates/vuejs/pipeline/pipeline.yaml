name: $(Date:yyyyMMdd)$(Rev:.r)

trigger:
  - develop

resources:
  repositories:
  - repository: templates
    type: git
    name: 'Arquitectura - AzureDevops Customizations/pipelines-templates'

variables:
  - name: ForceDeploy
    value: true
  - group: Frontend.PRU

stages:
- stage: BuildStage
  jobs:
  - job: BuildJob
    pool:
      name: 'Agent_Linux_V1'
    workspace:
      clean: all
    steps:
    - task: ReplaceTokens@1
      displayName: 'Replace tokens in .env.template'
      inputs:
        sourcePath: ./
        filePattern: '*.env.template'
        
    - task: NodeTool@0
      inputs:
        versionSpec: '12.x'
      displayName: 'Install Node.js 12.x'

    - task: Npm@0
      displayName: 'npm install'
      inputs:
        cwd: .

    - task: Docker@0
      displayName: 'Build an image'
      inputs:
        azureSubscription: 'Entorno PRUEBAS'
        azureContainerRegistry: '$(ACR)'
        dockerFile: Dockerfile
        imageName: '$(dockerImage):$(Version)'

    - task: Docker@0
      displayName: 'Push an image'
      inputs:
        azureSubscription: 'Entorno PRUEBAS'
        azureContainerRegistry: '$(ACR)'
        action: 'Push an image'
        imageName: '$(dockerImage):$(Version)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: Kubernetes'
      inputs:
        PathtoPublish: Deployment
        ArtifactName: deploy

- stage: DeployPRU
  condition: and(or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['ForceDeploy'],'true')), succeeded())
  dependsOn: BuildStage
  jobs:
  - deployment: PRU
    variables:
    - group: Frontend.PRU

    environment: 'PRU'
    pool:
      name: 'Agent_Linux_V1'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: ReplaceTokens@1
              displayName: 'Replace tokens in $(Pipeline.Workspace)/deploy'
              inputs:
                sourcePath: '$(Pipeline.Workspace)/deploy'
                filePattern: '*.yaml'
                

            - template: deploy/aks/deploy.without.ingress.yaml@templates
              parameters:
                aksSubscription: 'Entorno PRUEBAS'
                azureSubscriptionEndpoint: 'Entorno PRUEBAS'
                azureResourceGroup: '$(GRUPO_RECURSOS_AKS)'
                kubernetesCluster: '$(KUBERNETES_CLUSTER)'
                namespace: '$(NAMESPACE)'
                configuration: '$(WORKSPACEROUTE)'
                azureSubscriptionEndpointForSecrets: 'Entorno PRUEBAS'
                azureContainerRegistry: 'acrgeneralpru.azurecr.io'
                condition: and(succeeded(), not(contains(variables['secretosaks.KubectlOutput'], 'ca-asisa-key-pair')))
                inlineScript: '$(INLINE_SCRIPT)'            
                  
